-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.6 from Language/TNT/Parser.y
-----------------------------------------------------------------------------

state 29 contains 2 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> many_statements                   (0)
	many_statements -> many_reversed_statements        (1)
	many_reversed_statements ->                        (2)
	many_reversed_statements -> many_reversed_statements terminator statement   (3)
	many_expressions -> many_reversed_expressions      (4)
	many_reversed_expressions ->                       (5)
	many_reversed_expressions -> many_reversed_expressions ',' expression   (6)
	statement ->                                       (7)
	statement -> import                                (8)
	statement -> expression                            (9)
	expression -> string                               (10)
	expression -> variable                             (11)
	expression -> access                               (12)
	expression -> mutate                               (13)
	expression -> invoke                               (14)
	terminator -> ';'                                  (15)
	terminator -> '\n'                                 (16)
	import -> IMPORT qualified_name                    (17)
	string -> STRING                                   (18)
	variable -> NAME                                   (19)
	access -> expression '.' NAME                      (20)
	mutate -> expression '.' NAME '=' expression       (21)
	invoke -> expression '(' many_expressions ')'      (22)
	qualified_name -> NAME                             (23)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	IMPORT         { Token Token.Import _ }
	STRING         { Token (Token.String $$) _ }
	NAME           { Token (Name $$) _ }
	'='            { Token Equals _ }
	'.'            { Token Dot _ }
	','            { Token Comma _ }
	'('            { Token OpenParen _ }
	')'            { Token CloseParen _ }
	';'            { Token Semi _ }
	'\n'           { Token Newline _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	many_statements rule  1
	many_reversed_statements rules 2, 3
	many_expressions rule  4
	many_reversed_expressions rules 5, 6
	statement       rules 7, 8, 9
	expression      rules 10, 11, 12, 13, 14
	terminator      rules 15, 16
	import          rule  17
	string          rule  18
	variable        rule  19
	access          rule  20
	mutate          rule  21
	invoke          rule  22
	qualified_name  rule  23

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	';'            reduce using rule 2
	'\n'           reduce using rule 2
	%eof           reduce using rule 2

	many_statementsgoto state 3
	many_reversed_statementsgoto state 2

State 1



	many_reversed_statementsgoto state 2

State 2

	many_statements -> many_reversed_statements .       (rule 1)
	many_reversed_statements -> many_reversed_statements . terminator statement    (rule 3)

	';'            shift, and enter state 5
	'\n'           shift, and enter state 6
	%eof           reduce using rule 1

	terminator     goto state 4

State 3

	%start_parser -> many_statements .                  (rule 0)

	%eof           accept


State 4

	many_reversed_statements -> many_reversed_statements terminator . statement    (rule 3)

	IMPORT         shift, and enter state 15
	STRING         shift, and enter state 16
	NAME           shift, and enter state 17
	';'            reduce using rule 7
	'\n'           reduce using rule 7
	%eof           reduce using rule 7

	statement      goto state 7
	expression     goto state 8
	import         goto state 9
	string         goto state 10
	variable       goto state 11
	access         goto state 12
	mutate         goto state 13
	invoke         goto state 14

State 5

	terminator -> ';' .                                 (rule 15)

	IMPORT         reduce using rule 15
	STRING         reduce using rule 15
	NAME           reduce using rule 15
	';'            reduce using rule 15
	'\n'           reduce using rule 15
	%eof           reduce using rule 15


State 6

	terminator -> '\n' .                                (rule 16)

	IMPORT         reduce using rule 16
	STRING         reduce using rule 16
	NAME           reduce using rule 16
	';'            reduce using rule 16
	'\n'           reduce using rule 16
	%eof           reduce using rule 16


State 7

	many_reversed_statements -> many_reversed_statements terminator statement .    (rule 3)

	';'            reduce using rule 3
	'\n'           reduce using rule 3
	%eof           reduce using rule 3


State 8

	statement -> expression .                           (rule 9)
	access -> expression . '.' NAME                     (rule 20)
	mutate -> expression . '.' NAME '=' expression      (rule 21)
	invoke -> expression . '(' many_expressions ')'     (rule 22)

	'.'            shift, and enter state 20
	'('            shift, and enter state 21
	';'            reduce using rule 9
	'\n'           reduce using rule 9
	%eof           reduce using rule 9


State 9

	statement -> import .                               (rule 8)

	';'            reduce using rule 8
	'\n'           reduce using rule 8
	%eof           reduce using rule 8


State 10

	expression -> string .                              (rule 10)

	'.'            reduce using rule 10
	','            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	';'            reduce using rule 10
	'\n'           reduce using rule 10
	%eof           reduce using rule 10


State 11

	expression -> variable .                            (rule 11)

	'.'            reduce using rule 11
	','            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	';'            reduce using rule 11
	'\n'           reduce using rule 11
	%eof           reduce using rule 11


State 12

	expression -> access .                              (rule 12)

	'.'            reduce using rule 12
	','            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	';'            reduce using rule 12
	'\n'           reduce using rule 12
	%eof           reduce using rule 12


State 13

	expression -> mutate .                              (rule 13)

	'.'            reduce using rule 13
	','            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	';'            reduce using rule 13
	'\n'           reduce using rule 13
	%eof           reduce using rule 13


State 14

	expression -> invoke .                              (rule 14)

	'.'            reduce using rule 14
	','            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	';'            reduce using rule 14
	'\n'           reduce using rule 14
	%eof           reduce using rule 14


State 15

	import -> IMPORT . qualified_name                   (rule 17)

	NAME           shift, and enter state 19

	qualified_name goto state 18

State 16

	string -> STRING .                                  (rule 18)

	'.'            reduce using rule 18
	','            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	';'            reduce using rule 18
	'\n'           reduce using rule 18
	%eof           reduce using rule 18


State 17

	variable -> NAME .                                  (rule 19)

	'.'            reduce using rule 19
	','            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	';'            reduce using rule 19
	'\n'           reduce using rule 19
	%eof           reduce using rule 19


State 18

	import -> IMPORT qualified_name .                   (rule 17)

	';'            reduce using rule 17
	'\n'           reduce using rule 17
	%eof           reduce using rule 17


State 19

	qualified_name -> NAME .                            (rule 23)

	';'            reduce using rule 23
	'\n'           reduce using rule 23
	%eof           reduce using rule 23


State 20

	access -> expression '.' . NAME                     (rule 20)
	mutate -> expression '.' . NAME '=' expression      (rule 21)

	NAME           shift, and enter state 24


State 21

	invoke -> expression '(' . many_expressions ')'     (rule 22)

	','            reduce using rule 5
	')'            reduce using rule 5

	many_expressionsgoto state 22
	many_reversed_expressionsgoto state 23

State 22

	invoke -> expression '(' many_expressions . ')'     (rule 22)

	')'            shift, and enter state 27


State 23

	many_expressions -> many_reversed_expressions .     (rule 4)
	many_reversed_expressions -> many_reversed_expressions . ',' expression    (rule 6)

	','            shift, and enter state 26
	')'            reduce using rule 4


State 24

	access -> expression '.' NAME .                     (rule 20)
	mutate -> expression '.' NAME . '=' expression      (rule 21)

	'='            shift, and enter state 25
	'.'            reduce using rule 20
	','            reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	';'            reduce using rule 20
	'\n'           reduce using rule 20
	%eof           reduce using rule 20


State 25

	mutate -> expression '.' NAME '=' . expression      (rule 21)

	STRING         shift, and enter state 16
	NAME           shift, and enter state 17

	expression     goto state 29
	string         goto state 10
	variable       goto state 11
	access         goto state 12
	mutate         goto state 13
	invoke         goto state 14

State 26

	many_reversed_expressions -> many_reversed_expressions ',' . expression    (rule 6)

	STRING         shift, and enter state 16
	NAME           shift, and enter state 17

	expression     goto state 28
	string         goto state 10
	variable       goto state 11
	access         goto state 12
	mutate         goto state 13
	invoke         goto state 14

State 27

	invoke -> expression '(' many_expressions ')' .     (rule 22)

	'.'            reduce using rule 22
	','            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	';'            reduce using rule 22
	'\n'           reduce using rule 22
	%eof           reduce using rule 22


State 28

	many_reversed_expressions -> many_reversed_expressions ',' expression .    (rule 6)
	access -> expression . '.' NAME                     (rule 20)
	mutate -> expression . '.' NAME '=' expression      (rule 21)
	invoke -> expression . '(' many_expressions ')'     (rule 22)

	'.'            shift, and enter state 20
	','            reduce using rule 6
	'('            shift, and enter state 21
	')'            reduce using rule 6


State 29

	access -> expression . '.' NAME                     (rule 20)
	mutate -> expression . '.' NAME '=' expression      (rule 21)
	mutate -> expression '.' NAME '=' expression .      (rule 21)
	invoke -> expression . '(' many_expressions ')'     (rule 22)

	'.'            shift, and enter state 20
			(reduce using rule 21)

	','            reduce using rule 21
	'('            shift, and enter state 21
			(reduce using rule 21)

	')'            reduce using rule 21
	';'            reduce using rule 21
	'\n'           reduce using rule 21
	%eof           reduce using rule 21


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 24
Number of terminals: 10
Number of non-terminals: 15
Number of states: 30
